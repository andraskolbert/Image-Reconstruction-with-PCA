),
tabItem(tabName = "biplot",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Bi-Plot",
width = 12,
solidHeader = TRUE,
status = "primary",
plotOutput("PC12plot"),
"BiPlot:
The bi-plot shows both the loadings and the scores for two
selected components in parallel. Bi-plot display is a
visualization technique for investigating the inter-relationships
between the observations and variables in multivariate data.
In PCA, relationships between PC scores and PCA loadings
associated with any two PCs can be illustrated in a bi-plot
display.")
)
),
tabItem(tabName = "tableExplained",
# Boxes need to be put in a row (or column)
fluidRow(
box(title = "Explained Variance",
width = 12,
solidHeader = TRUE,
status = "primary",
tableOutput("table_exp"),
"Explained variance"),
fluidRow(
box(title = "Kaiser Criteria",
width = 6,
solidHeader = TRUE,
status = "primary",
verbatimTextOutput("kaiser")),
box(title = "Pearson Criteria",
width = 6,
solidHeader = TRUE,
status = "primary",
verbatimTextOutput("pearson"))
) #end of inside ("criteria") fluidRow
) #end of outside ("explained variance") fluidRow
) #end of "tableExplained" tabItem
) #end of tabItems
) #end of dashboard body
) #end of dashboard page (ui)
############################################
##### SERVER #####
server <- function(input, output, session) {
# set file limit to 5mb
options(shiny.maxRequestSize = 5*1024^2)
#copy the file into the pic's folder, save as user.jpg
observe({
if (is.null(input$upload)) return()
file.remove(paste(getwd(),"pics","UserInput.jpg", sep="/"))
file.copy(input$upload$datapath, paste(getwd(),"pics","UserInput.jpg", sep="/"))
})
output$result <- renderImage({
#Dropdown menu decides which input to load
#Reads the filenames into a variable
picfiles <- grep('.jpg', list.files(path = paste(getwd(),"pics", sep="/")),
value=TRUE)
#Rtrail - eliminating .jpg
picnames <- gsub(".jpg", "", picfiles)
#Creating named list for the dropdown menu
ls_choices.list <- as.list(picfiles)
names(ls_choices.list) <- picnames
ls_choices.list
#load to "var" the path to the user-chosen input image
var <-switch(input$image,
"lisbon" = "pics/LisbonInput.jpg",
"monalisa" = "pics/MonaLisaInput.jpg",
"user" = "pics/UserInput.jpg"
)
# loading picture previously chosen
original=readJPEG(var)
#chosen picture into the form of a 3D matrix (each pixel has 3 values: RGB)
#(or, in other words, 3 matrices: 1 for each of the R, G and B component)
R=original[,,1]
G=original[,,2]
B=original[,,3]
#Updating the displayed maximum number of PCs to use
updateSliderInput(session, "numPCs", max =dim(original)[2])
#Number of principal components to use (coming from the input slider):
k = input$numPCs
#Compute a correlation or covariance matrix and its eigen vectors
#(for all R, G and B - to be used in further calculations)
#Red
r <- switch(input$CorCov,
"cor" = cor(R),
"cov" = cov(R)
)
g=eigen(r)
Rv=g$vectors[,1:k]
#Green
r <- switch(input$CorCov,
"cor" = cor(G),
"cov" = cov(G)
)
g=eigen(r)
Gv=g$vectors[,1:k]
#Blue
r <-switch(input$CorCov,
"cor" = cor(B),
"cov" = cov(B)
)
g=eigen(r)
Bv=g$vectors[,1:k]
#output theory for R,G or B (1 of them, depending on the input)
A <- switch(input$RGB,
"r" = R,
"g" = G,
"b" = B)
g <- switch(input$CorCov,
"cor" = eigen(cor(A)),
"cov" = eigen(cov(A)))
# -1- perentage of total variation explained by the components (first 15)
perc_exp<-g$values/ncol(A) #dim(original)[2]
cum_exp<-c(perc_exp[1], sum(perc_exp[1:2]), sum(perc_exp[1:3]),
sum(perc_exp[1:4]),sum(perc_exp[1:5]),sum(perc_exp[1:6]),
sum(perc_exp[1:7]),sum(perc_exp[1:8]),sum(perc_exp[1:9]),
sum(perc_exp[1:10]),sum(perc_exp[1:11]),sum(perc_exp[1:12]),
sum(perc_exp[1:13]),sum(perc_exp[1:14]),sum(perc_exp[1:15]),
sum(perc_exp[1:16]),sum(perc_exp[1:17]),sum(perc_exp[1:18]),
sum(perc_exp[1:19]),sum(perc_exp[1:20]))
table_exp<-cbind(values=g$values[1:20], variance_explained=perc_exp[1:20],
cummulated_variance_explained=cum_exp)
#output for the app:
output$table_exp <- renderTable({
table_exp
})
# -2- screeplot to see the elbow
lambda=g$values
#output for the app:
output$screeplot <- renderPlot(
plot(y=lambda,
x=1:length(lambda),
log="x",
type="b",
las=1,
ylab="Eigenvalues",
xlab="Index (log scale)")
)
output$info <- renderText({
paste0("Number of PCs chosen by scree plot: ",
round(input$plot_click$x))
})
output$point <- renderPlot(
points(input$numPCs, lambda[input$numPCs], col="red", pch=19))
# -3- Kaiser criterion
#the number of Principal Components that should be considered: factors with
#eigenvalues greater than 1
Kaiser <- sum(table_exp[,1] > 1)
#output for the app:
output$kaiser <- renderText({
paste0("According to Kaiser, we should keep the principal components with eigenvalues greater than 1. In our case the number of principal components to keep by the Kaiser criterion is ",
Kaiser,
".")
})
# -4- Pearson criterion
#accept PC until when cumulated variance explained is above 0.8, included
Pearson <- sum(table_exp[,3] <= 0.8)+1
#output for the app:
output$pearson <- renderText({
paste0("Regarding the Pearson's criterion, we have enough principal components when the cumulative  variance explained by them is more than 80%. In this case the number of principal components to keep by Pearson criterion is ",
Pearson,
".")
})
# -5- loadings
#15 rows, 10 columns, just a sample!
A.std<-scale(A, center=TRUE, scale=TRUE)
scores<-A.std%*%g$vectors
loadings<-cor(scores, A.std)
#output for the app:
output$loadings <- renderTable({
loadings[1:15,1:10]
})
# -6- scatterplot of the scores PC1 versus PC2
#output for the app:
output$PC12plot <- renderPlot({
plot(scores[,1:2])
abline(h=0);
abline(v=0)
})
#end of output theory
#a temp file to save the output
outfile <- tempfile(fileext = ".jpg")
#initialize to a 3D matrix of the correct size
img=original
img[,,1]=R%*%Rv%*%t(Rv)
img[,,2]=G%*%Gv%*%t(Gv)
img[,,3]=B%*%Bv%*%t(Bv)
writeJPEG(img, target = outfile)
#return a list containing information about the image
list(src = outfile,
contentType = "image/jpeg")
}) #end of renderImage
} #end of server
shinyApp(ui = ui, server = server)
originalGOOD = readJPEG("MAAInput.jpg")
setwd("C:\\Users\\closer\\Documents\\Projecto\\DA-project")
setwd("C:\\Users\\closer\\Documents\\Projecto\\DA-project")
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
original = originalGOOD
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.1){
}
original[i,j, d] <- NA
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
if(sum(is.na(G))>0) {
imp <- mice(G, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
G <- sapply(Datimp[145:288, 3:120], as.numeric)
}
if(sum(is.na(B))>0) {
Datimp <- complete(imp, "long", include=TRUE)
imp <- mice(B, m=1, maxit=1, printFlag=TRUE)
B <- sapply(Datimp[145:288, 3:120], as.numeric)
}
img=original
img[,,1]=R
img[,,2]=G
img[,,3]=B
writeJPEG(img,"MissingValuesOutput2.jpg")
k=60
r=cor(R)
g=eigen(r)
Rv=g$vectors[,1:k]
###Green
#r=cov(G)
r=cor(G)
g=eigen(r)
Gv=g$vectors[,1:k]
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.1){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
# (Install jpeg library previously)
# Load library and read the file
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
##################################################
#MISSING DATA CHALLENGE
##################################################
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.2){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
#treating missing values R
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
# (Install jpeg library previously)
# Load library and read the file
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
##################################################
#MISSING DATA CHALLENGE
##################################################
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.3){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
#treating missing values R
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
# (Install jpeg library previously)
# Load library and read the file
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
##################################################
#MISSING DATA CHALLENGE
##################################################
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.3){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
#treating missing values R
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
# (Install jpeg library previously)
# Load library and read the file
library(jpeg)
originalGOOD = readJPEG("MAAInput.jpg")
original = readJPEG("MAAInputDes.jpg")
##################################################
#MISSING DATA CHALLENGE
##################################################
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.3){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
#treating missing values R
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\Projecto\\DA-project\\MissingValuesTreatmentGray")
# Load library and read the file
library(jpeg)
original = readJPEG("MAAInput.jpg")
# The image is viewed as a 3D array of dimensions:
dim(original)
### Missing Values (inserted)
#insert missing values (NA)
#(check http://www.r-bloggers.com/r-na-vs-null/)
original[60:75, 60:65, 1:3] <- NA
writeJPEG(original,"MonaLisaMissingValues.jpg")
gray = (original[,,1]+original[,,2]+original[,,3])/3
# Check whether there are missing values and treat them
if(sum(is.na(gray))>0) {
library(mice)
imp <- mice(gray, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
gray2 <- Datimp[145:288, 1:120]
gray <- sapply(gray2[1:144, 3:120], as.numeric)
}
############################################################
#	IMAGE RECONSTRUCTION WITH PRINCIPAL COMPONENTS ANALYSIS  #
# Shiny dashboard                                          #
############################################################
#   Final Project                                          #
#   Descriptive Analytics                                  #
#   Fall semester 2015/2016                                #
#   Master in Advanced Analytics                           #
############################################################
#   Carolina Almeida                                       #
#   Beata Babiakova                                        #
#   Andras Kolbert                                         #
############################################################
# Set Working Directory
setwd("C:\\Users\\closer\\Documents\\GitHub\\DA-project\\MissingValuesTreatmentColor")
# (Install jpeg library previously)
# Load library and read the file
library(jpeg)
originalGOOD = readJPEG("MonaLisaInput.jpg")
original = readJPEG("MonaLisaInputDes.jpg")
##################################################
#MISSING DATA CHALLENGE - image compared with original
##################################################
for (d in 1:3){
for (i in 1:nrow(originalGOOD)){
for (j in 1:ncol(originalGOOD)){
if(abs(originalGOOD[i, j, d] - original[i,j, d]) > 0.3){
original[i,j, d] <- NA
}
}
}
}
sum(is.na(original))
writeJPEG(original,"MissingValuesOutput1.jpg")
R=original[,,1]
G=original[,,2]
B=original[,,3]
library(mice)
#treating missing values R
if(sum(is.na(R))>0) {
imp <- mice(R, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
R <- sapply(Datimp[145:288, 3:120], as.numeric)
}
#treating missing values G
if(sum(is.na(G))>0) {
imp <- mice(G, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
G <- sapply(Datimp[145:288, 3:120], as.numeric)
}
#treating missing values B
if(sum(is.na(B))>0) {
imp <- mice(B, m=1, maxit=1, printFlag=TRUE)
Datimp <- complete(imp, "long", include=TRUE)
B <- sapply(Datimp[145:288, 3:120], as.numeric)
}
img=original
img[,,1]=R
img[,,2]=G
img[,,3]=B
writeJPEG(img,"MissingValuesOutput2.jpg")
##################################################
#end of MISSING DATA CHALLENGE
##################################################
# Compute a correlation or covariance matrix
# and its eigen vectors
#Number of principal components to use:
k=60
### Red
#r=cov(R)
r=cor(R)
g=eigen(r)
Rv=g$vectors[,1:k]
###Green
#r=cov(G)
r=cor(G)
g=eigen(r)
Gv=g$vectors[,1:k]
###Blue
#r=cov(B)
r=cor(B)
g=eigen(r)
Bv=g$vectors[,1:k]
# Reconstruct the original image
# just an easy way to initialize it to a 3D matrix of the correct size
#img=original
img[,,1]=R%*%Rv%*%t(Rv)
img[,,2]=G%*%Gv%*%t(Gv)
img[,,3]=B%*%Bv%*%t(Bv)
name=paste(k,"PCsRGB.jpeg")
writeJPEG(img,name)
